///
/// @Generated by Mockolo
///

import BitPandaAssets
import BitPandaCore
import Combine
import Foundation

// MARK: - AssetsBuildableMock

public class AssetsBuildableMock: AssetsBuildable {

    // MARK: Lifecycle

    public init() { }

    // MARK: Public

    public private(set) var buildCallCount = 0
    public var buildHandler: ((AssetsListener) -> (AssetsRouting))?

    public func build(withListener listener: AssetsListener) -> AssetsRouting {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return AssetsRoutingMock()
    }
}

// MARK: - AssetsRoutingMock

public class AssetsRoutingMock: AssetsRouting {

    // MARK: Lifecycle

    public init() { }
    public init(viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock()) {
        self.viewControllable = viewControllable
        self.interactable = interactable
    }

    // MARK: Public

    public private(set) var lifecycleSubject = PassthroughSubject<RouterLifecycle, Never>()
    public private(set) var viewControllableSetCallCount = 0
    public private(set) var interactableSetCallCount = 0
    public private(set) var childrenSetCallCount = 0
    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> Void)?
    public private(set) var attachCallCount = 0
    public var attachHandler: ((Routing) -> Void)?
    public private(set) var detachCallCount = 0
    public var detachHandler: ((Routing) -> Void)?

    public var lifecycle: AnyPublisher<RouterLifecycle, Never> { lifecycleSubject.eraseToAnyPublisher() }
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }
    public var children = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public func load() {
        loadCallCount += 1
        if let loadHandler {
            loadHandler()
        }
    }

    public func attach(child: Routing) {
        attachCallCount += 1
        if let attachHandler {
            attachHandler(child)
        }
    }

    public func detach(child: Routing) {
        detachCallCount += 1
        if let detachHandler {
            detachHandler(child)
        }
    }
}

// MARK: - AssetsServiceProtocolMock

public class AssetsServiceProtocolMock: AssetsServiceProtocol {

    // MARK: Lifecycle

    public init() { }

    // MARK: Public

    public private(set) var fetchCryptocoinsCallCount = 0
    public var fetchCryptocoinsHandler: (() -> ([Commodity]))?
    public private(set) var fetchCommoditiesCallCount = 0
    public var fetchCommoditiesHandler: (() -> ([Commodity]))?
    public private(set) var fetchFiatsCallCount = 0
    public var fetchFiatsHandler: (() -> ([Fiat]))?

    public func fetchCryptocoins() -> [Commodity] {
        fetchCryptocoinsCallCount += 1
        if let fetchCryptocoinsHandler = fetchCryptocoinsHandler {
            return fetchCryptocoinsHandler()
        }
        return [Commodity]()
    }

    public func fetchCommodities() -> [Commodity] {
        fetchCommoditiesCallCount += 1
        if let fetchCommoditiesHandler = fetchCommoditiesHandler {
            return fetchCommoditiesHandler()
        }
        return [Commodity]()
    }

    public func fetchFiats() -> [Fiat] {
        fetchFiatsCallCount += 1
        if let fetchFiatsHandler = fetchFiatsHandler {
            return fetchFiatsHandler()
        }
        return [Fiat]()
    }
}

// MARK: - AssetsPresentableMock

public class AssetsPresentableMock: AssetsPresentable {

    // MARK: Lifecycle

    public init() { }
    public init(listener: AssetsPresentableListener? = nil) {
        self.listener = listener
    }

    // MARK: Public

    public private(set) var listenerSetCallCount = 0

    public var listener: AssetsPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }
}

// MARK: - AssetsListenerMock

public class AssetsListenerMock: AssetsListener {
    public init() { }

}
