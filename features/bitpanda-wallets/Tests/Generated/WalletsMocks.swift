///
/// @Generated by Mockolo
///

import BitPandaCore
import BitPandaWallets
import Combine
import Foundation

// MARK: - WalletsServiceProtocolMock

public class WalletsServiceProtocolMock: WalletsServiceProtocol {

    // MARK: Lifecycle

    public init() { }

    // MARK: Public

    public private(set) var fetchWalletsCallCount = 0
    public var fetchWalletsHandler: (() -> ([Wallet]))?
    public private(set) var fetchCommodityWalletsCallCount = 0
    public var fetchCommodityWalletsHandler: (() -> ([Wallet]))?
    public private(set) var fetchFiatWalletsCallCount = 0
    public var fetchFiatWalletsHandler: (() -> ([FiatWallet]))?
    public private(set) var fetchCommodityCallCount = 0
    public var fetchCommodityHandler: ((String) -> (Commodity?))?
    public private(set) var fetchCryptocoinCallCount = 0
    public var fetchCryptocoinHandler: ((String) -> (Commodity?))?
    public private(set) var fetchFiatCallCount = 0
    public var fetchFiatHandler: ((String) -> (Fiat?))?

    public func fetchWallets() -> [Wallet] {
        fetchWalletsCallCount += 1
        if let fetchWalletsHandler = fetchWalletsHandler {
            return fetchWalletsHandler()
        }
        return [Wallet]()
    }

    public func fetchCommodityWallets() -> [Wallet] {
        fetchCommodityWalletsCallCount += 1
        if let fetchCommodityWalletsHandler = fetchCommodityWalletsHandler {
            return fetchCommodityWalletsHandler()
        }
        return [Wallet]()
    }

    public func fetchFiatWallets() -> [FiatWallet] {
        fetchFiatWalletsCallCount += 1
        if let fetchFiatWalletsHandler = fetchFiatWalletsHandler {
            return fetchFiatWalletsHandler()
        }
        return [FiatWallet]()
    }

    public func fetchCommodity(with id: String) -> Commodity? {
        fetchCommodityCallCount += 1
        if let fetchCommodityHandler = fetchCommodityHandler {
            return fetchCommodityHandler(id)
        }
        return nil
    }

    public func fetchCryptocoin(with id: String) -> Commodity? {
        fetchCryptocoinCallCount += 1
        if let fetchCryptocoinHandler = fetchCryptocoinHandler {
            return fetchCryptocoinHandler(id)
        }
        return nil
    }

    public func fetchFiat(with id: String) -> Fiat? {
        fetchFiatCallCount += 1
        if let fetchFiatHandler = fetchFiatHandler {
            return fetchFiatHandler(id)
        }
        return nil
    }
}

// MARK: - WalletsBuildableMock

public class WalletsBuildableMock: WalletsBuildable {

    // MARK: Lifecycle

    public init() { }

    // MARK: Public

    public private(set) var buildCallCount = 0
    public var buildHandler: ((WalletsListener) -> (WalletsRouting))?

    public func build(withListener listener: WalletsListener) -> WalletsRouting {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return WalletsRoutingMock()
    }
}

// MARK: - WalletsDetailBuildableMock

class WalletsDetailBuildableMock: WalletsDetailBuildable {

    // MARK: Lifecycle

    init() { }

    // MARK: Internal

    private(set) var buildCallCount = 0
    var buildHandler: ((WalletsDetailListener, SelectedWallet) -> (WalletsDetailRouting))?

    func build(withListener listener: WalletsDetailListener, selected: SelectedWallet) -> WalletsDetailRouting {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, selected)
        }
        return WalletsDetailRoutingMock()
    }
}

// MARK: - WalletsRoutingMock

public class WalletsRoutingMock: WalletsRouting {

    // MARK: Lifecycle

    public init() { }
    public init(viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock()) {
        self.viewControllable = viewControllable
        self.interactable = interactable
    }

    // MARK: Public

    public private(set) var attachDetailViewCallCount = 0
    public var attachDetailViewHandler: ((SelectedWallet) -> Void)?
    public private(set) var detachWalletDetailCallCount = 0
    public var detachWalletDetailHandler: (() -> Void)?
    public private(set) var lifecycleSubject = PassthroughSubject<RouterLifecycle, Never>()
    public private(set) var viewControllableSetCallCount = 0
    public private(set) var interactableSetCallCount = 0
    public private(set) var childrenSetCallCount = 0
    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> Void)?
    public private(set) var attachCallCount = 0
    public var attachHandler: ((Routing) -> Void)?
    public private(set) var detachCallCount = 0
    public var detachHandler: ((Routing) -> Void)?

    public var lifecycle: AnyPublisher<RouterLifecycle, Never> { lifecycleSubject.eraseToAnyPublisher() }
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }
    public var children = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public func attachDetailView(with model: SelectedWallet) {
        attachDetailViewCallCount += 1
        if let attachDetailViewHandler = attachDetailViewHandler {
            attachDetailViewHandler(model)
        }

    }

    public func detachWalletDetail() {
        detachWalletDetailCallCount += 1
        if let detachWalletDetailHandler = detachWalletDetailHandler {
            detachWalletDetailHandler()
        }

    }

    public func load() {
        loadCallCount += 1
        if let loadHandler {
            loadHandler()
        }
    }

    public func attach(child: Routing) {
        attachCallCount += 1
        if let attachHandler {
            attachHandler(child)
        }
    }

    public func detach(child: Routing) {
        detachCallCount += 1
        if let detachHandler {
            detachHandler(child)
        }
    }
}

// MARK: - WalletsDetailRoutingMock

class WalletsDetailRoutingMock: WalletsDetailRouting {

    // MARK: Lifecycle

    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), interactable: Interactable = InteractableMock()) {
        self.viewControllable = viewControllable
        self.interactable = interactable
    }

    // MARK: Public

    public private(set) var lifecycleSubject = PassthroughSubject<RouterLifecycle, Never>()
    public private(set) var viewControllableSetCallCount = 0
    public private(set) var interactableSetCallCount = 0
    public private(set) var childrenSetCallCount = 0
    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> Void)?
    public private(set) var attachCallCount = 0
    public var attachHandler: ((Routing) -> Void)?
    public private(set) var detachCallCount = 0
    public var detachHandler: ((Routing) -> Void)?

    public var lifecycle: AnyPublisher<RouterLifecycle, Never> { lifecycleSubject.eraseToAnyPublisher() }
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }
    public var children = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public func load() {
        loadCallCount += 1
        if let loadHandler {
            loadHandler()
        }
    }

    public func attach(child: Routing) {
        attachCallCount += 1
        if let attachHandler {
            attachHandler(child)
        }
    }

    public func detach(child: Routing) {
        detachCallCount += 1
        if let detachHandler {
            detachHandler(child)
        }
    }
}

// MARK: - WalletsDetailPresentableMock

class WalletsDetailPresentableMock: WalletsDetailPresentable {

    // MARK: Lifecycle

    init() { }
    init(listener: WalletsDetailPresentableListener? = nil) {
        self.listener = listener
    }

    // MARK: Internal

    private(set) var listenerSetCallCount = 0

    var listener: WalletsDetailPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }
}

// MARK: - WalletsPresentableMock

public class WalletsPresentableMock: WalletsPresentable {

    // MARK: Lifecycle

    public init() { }
    public init(listener: WalletsPresentableListener? = nil) {
        self.listener = listener
    }

    // MARK: Public

    public private(set) var listenerSetCallCount = 0

    public var listener: WalletsPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }
}

// MARK: - WalletsDetailListenerMock

class WalletsDetailListenerMock: WalletsDetailListener {

    // MARK: Lifecycle

    init() { }

    // MARK: Internal

    private(set) var onDismissCallCount = 0
    var onDismissHandler: (() -> Void)?

    func onDismiss() {
        onDismissCallCount += 1
        if let onDismissHandler = onDismissHandler {
            onDismissHandler()
        }

    }
}

// MARK: - WalletsListenerMock

public class WalletsListenerMock: WalletsListener {
    public init() { }

}
